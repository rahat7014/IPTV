/*--------------------------------------
	- Base
----------------------------------------*/

// Body Mixin
@mixin body($font-family: $font, $font-weight: 400, $color: $global-color, $font-size: $global-font-size, $line-height: 28px) {
	font-family: $font-family;
	font-weight: $font-weight;
	font-size: $font-size;
	line-height: $line-height;
	color: $color;
	margin: 0;
}

// Font Responsive
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($min-font-size);
	$u4: unit($max-font-size);

	@if $u1==$u2 and $u1==$u3 and $u1==$u4 {
		& {
			font-size: $min-font-size;

			@media screen and (min-width: $min-vw) {
				font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
			}

			@media screen and (min-width: $max-vw) {
				font-size: $max-font-size;
			}
		}
	}
}

// Font Size
@mixin font-size($size) {
	font-size: $size;
}

// Font Size Class
@mixin font($size, $brackpoint: null, $pre: px) {

	@if $brackpoint {
		@include media-breakpoint-up(#{$brackpoint}) {
			.font-#{$brackpoint}-#{$size} {
				font-size: #{$size}#{$pre};
			}
		}
	}

	@else {
		.font-#{$size} {
			font-size: #{$size}#{$pre};
		}
	}
}

//Line Height
@mixin line-height($size, $brackpoint: null, $pre: px) {
	@if $brackpoint {
		@include media-breakpoint-up(#{$brackpoint}) {
			.line-height-#{$brackpoint}-#{$size} {
				line-height: #{$size}#{$pre};
			}
		}
	}

	@else {
		.line-height-#{$size} {
			line-height: #{$size}#{$pre};
		}
	}
}

// Content grouping
//
// 1. Add the correct box sizing in Firefox.
// 2. Show the overflow in Edge and IE.

// hr mixin
@mixin hr($bg: $global-color, $width: 50px, $height: 5px, $my: 50px, $mx: 0, $p: 0, $radius: 0) {
	background: $bg;
	width: $width;
	height: $height;
	margin: $my $mx;
	padding: $p;
	border: none;
	border-radius: $radius;
	box-sizing: content-box; // 1
	overflow: visible; // 2
}

/*--------------------------------------
	- Layout
----------------------------------------*/
// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min !=0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);

	@if $min {
		@media (min-width: $min) {
			@content;
		}
	}

	@else {
		@content;
	}
}

//Gird Columns Width Responsive
@mixin col($brackpoint, $grid-columns) {
	.col-#{$brackpoint}-#{$grid-columns} {
		@include make-col-ready();

		@include media-breakpoint-up(#{$brackpoint}) {
			@include make-col($grid-columns);
		}
	}
}

/*--------------------------------------
	- Utilities
----------------------------------------*/
//Create the mixin for theme colors
@mixin color($name, $color) {
	// Define colors in your theme
	$primary: $color;
	$bg-color: $color;

	// Add your Prefix classe name
	.#{$name}-color {
		color: $primary;
	}

	.bg-#{$name} {
		background: $primary;
	}
	
}
// Gradient Color Mixin
@mixin gradient($direction, $list) {
	background: -webkit-linear-gradient($direction, $list);
	background: -moz-linear-gradient($direction, $list);
	background: -o-linear-gradient($direction, $list);
	background: linear-gradient($direction, $list);
}

// Gradient Color Class Name with Mixin
@mixin gr-class($class, $direction, $name) {
	.#{$class} {
		@include gradient($direction, $name);
	}
}

// Margin Name with Mixin
@mixin margin($name, $value, $pre:px) {

	// Add your Prefix name	
	@if $name==mt {
		@if $value==auto {
			margin-top: #{$value};
		}

		@else {
			margin-top: #{$value}#{$pre};
		}
	}

	@else if $name==mb {
		@if $value==auto {
			margin-bottom: #{$value};
		}

		@else {
			margin-bottom: #{$value}#{$pre};
		}
	}

	@else if $name==ml {
		@if $value==auto {
			margin-left: #{$value};
		}

		@else {
			margin-left: #{$value}#{$pre};
		}
	}

	@else if $name==mr {
		@if $value==auto {
			margin-right: #{$value};
		}

		@else {
			margin-right: #{$value}#{$pre};
		}
	}

	@else if $name==mx {
		@if $value==auto {
			margin-left: #{$value};
			margin-right: #{$value};
		}

		@else {
			margin-left: #{$value}#{$pre};
			margin-right: #{$value}#{$pre};
		}
	}

	@else if $name==my {
		@if $value==auto {
			margin-top: #{$value};
			margin-bottom: #{$value};
		}

		@else {
			margin-top: #{$value}#{$pre};
			margin-bottom: #{$value}#{$pre};
		}
	}

	@else if $name==m {
		@if $value==auto {
			margin: #{$value};
		}

		@else {
			margin: #{$value}#{$pre};
		}
	}

	@else {
		@content;
	}
}

// Margin Class Name with Mixin
@mixin margin-class($name, $value, $pre: px) {

	// Add your Prefix classe name	
	@if $name==mt {
		@if $value==auto {
			.#{$name}-#{$value} {
				margin-top: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				margin-top: #{$value}#{$pre};
			}
		}
	}

	@else if $name==mb {
		@if $value==auto {
			.#{$name}-#{$value} {
				margin-bottom: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				margin-bottom: #{$value}#{$pre};
			}
		}
	}

	@else if $name==ml {
		@if $value==auto {
			.#{$name}-#{$value} {
				margin-left: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				margin-left: #{$value}#{$pre};
			}
		}
	}

	@else if $name==mr {
		@if $value==auto {
			.#{$name}-#{$value} {
				margin-right: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				margin-right: #{$value}#{$pre};
			}
		}
	}

	@else if $name==mx {
		@if $value==auto {
			.#{$name}-#{$value} {
				margin-left: #{$value};
				margin-right: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				margin-left: #{$value}#{$pre};
				margin-right: #{$value}#{$pre};
			}
		}
	}

	@else if $name==my {
		@if $value==auto {
			.#{$name}-#{$value} {
				margin-top: #{$value};
				margin-bottom: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				margin-top: #{$value}#{$pre};
				margin-bottom: #{$value}#{$pre};
			}
		}
	}

	@else if $name==m {
		@if $value==auto {
			.#{$name}-#{$value} {
				margin: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				margin: #{$value}#{$pre};
			}
		}
	}

	@else {
		@content;
	}
}

// Responsive Margin Class Name with Mixin
@mixin margin-rs($name, $brakpoint, $value, $pre: px) {

	// Add your Prefix classe name
	@if $name==mt {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-top: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-top: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==mb {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-bottom: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-bottom: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==ml {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-left: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-left: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==mr {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-right: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-right: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==mx {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-left: #{$value};
					margin-right: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-left: #{$value}#{$pre};
					margin-right: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==my {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-top: #{$value};
					margin-bottom: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin-top: #{$value}#{$pre};
					margin-bottom: #{$value}#{$pre};
				}
			}
		}

	}

	@else if $name==m {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					margin: #{$value}#{$pre};
				}
			}
		}

	}

	@else {
		@content;
	}
}

// padding Name with Mixin
@mixin padding($name, $value, $pre: px) {

	// Add your Prefix name
	@if $name==pt {
		@if $value==auto {
			padding-top: #{$value};
		}

		@else {
			padding-top: #{$value}#{$pre};
		}
	}

	@else if $name==pb {
		@if $value==auto {
			padding-bottom: #{$value};
		}

		@else {
			padding-bottom: #{$value}#{$pre};
		}
	}

	@else if $name==pl {
		@if $value==auto {
			padding-left: #{$value};
		}

		@else {
			padding-left: #{$value}#{$pre};
		}
	}

	@else if $name==pr {
		@if $value==auto {
			padding-right: #{$value};
		}

		@else {
			padding-right: #{$value}#{$pre};
		}
	}

	@else if $name==px {
		@if $value==auto {
			padding-left: #{$value};
			padding-right: #{$value};
		}

		@else {
			padding-left: #{$value}#{$pre};
			padding-right: #{$value}#{$pre};
		}
	}

	@else if $name==py {
		@if $value==auto {
			padding-top: #{$value};
			padding-bottom: #{$value};
		}

		@else {
			padding-top: #{$value}#{$pre};
			padding-bottom: #{$value}#{$pre};
		}
	}

	@else if $name==p {
		@if $value==auto {
			padding: #{$value};
		}

		@else {
			padding: #{$value}#{$pre};
		}
	}

	@else {
		@content;
	}
}

// padding Class Name with Mixin
@mixin padding-class($name, $value, $pre: px) {

	// Add your Prefix classe name	
	@if $name==pt {
		@if $value==auto {
			.#{$name}-#{$value} {
				padding-top: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				padding-top: #{$value}#{$pre};
			}
		}
	}

	@else if $name==pb {
		@if $value==auto {
			.#{$name}-#{$value} {
				padding-bottom: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				padding-bottom: #{$value}#{$pre};
			}
		}
	}

	@else if $name==pl {
		@if $value==auto {
			.#{$name}-#{$value} {
				padding-left: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				padding-left: #{$value}#{$pre};
			}
		}
	}

	@else if $name==pr {
		@if $value==auto {
			.#{$name}-#{$value} {
				padding-right: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				padding-right: #{$value}#{$pre};
			}
		}
	}

	@else if $name==px {
		@if $value==auto {
			.#{$name}-#{$value} {
				padding-left: #{$value};
				padding-right: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				padding-left: #{$value}#{$pre};
				padding-right: #{$value}#{$pre};
			}
		}
	}

	@else if $name==py {
		@if $value==auto {
			.#{$name}-#{$value} {
				padding-top: #{$value};
				padding-bottom: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				padding-top: #{$value}#{$pre};
				padding-bottom: #{$value}#{$pre};
			}
		}
	}

	@else if $name==p {
		@if $value==auto {
			.#{$name}-#{$value} {
				padding: #{$value};
			}
		}

		@else {
			.#{$name}-#{$value} {
				padding: #{$value}#{$pre};
			}
		}
	}

	@else {
		@content;
	}
}

// Responsive padding Class Name with Mixin
@mixin padding-rs($name, $brakpoint, $value, $pre: px) {

	// Add your Prefix classe name
	@if $name==pt {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-top: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-top: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==pb {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-bottom: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-bottom: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==pl {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-left: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-left: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==pr {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-right: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-right: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==px {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-left: #{$value};
					padding-right: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-left: #{$value}#{$pre};
					padding-right: #{$value}#{$pre};
				}
			}
		}
	}

	@else if $name==py {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-top: #{$value};
					padding-bottom: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding-top: #{$value}#{$pre};
					padding-bottom: #{$value}#{$pre};
				}
			}
		}

	}

	@else if $name==p {
		@if $value==auto {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding: #{$value};
				}
			}
		}

		@else {
			.#{$name}-#{$brakpoint}-#{$value} {
				@include media-breakpoint-up(#{$brakpoint}) {
					padding: #{$value}#{$pre};
				}
			}
		}

	}

	@else {
		@content;
	}
}

// Border 
@mixin border($type: null, $size: 1px, $style: solid, $color: $global-color) {
	@if $type==top {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==bottom {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==left {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==right {
		border#{-$type}: #{$size} #{$style} #{$color};
	}

	@else if $type==by {
		border-top: #{$size} #{$style} #{$color};
		border-bottom: #{$size} #{$style} #{$color};
	}

	@else if $type==bx {
		border-left: #{$size} #{$style} #{$color};
		border-right: #{$size} #{$style} #{$color};
	}

	@else {
		border: #{$size} #{$style} #{$color};
	}
}

// Border 
@mixin border-class($type: null, $size: 1px, $style: solid, $color: $global-color) {
	// Add your Prefix classe name
	@if $type==top {
		.border-#{$type} {
			border#{-$type}: #{$size} #{$style} #{$color};
		}
	}

	@else if $type==bottom {
		.border-#{$type} {
			border#{-$type}: #{$size} #{$style} #{$color};
		}
	}

	@else if $type==left {
		.border-#{$type} {
			border#{-$type}: #{$size} #{$style} #{$color};
		}
	}

	@else if $type==right {
		.border-#{$type} {
			border#{-$type}: #{$size} #{$style} #{$color};
		}
	}

	@else {
		.border {
			border: #{$size} #{$style} #{$color};
		}
	}
}

// Border 
@mixin border-rs($brakpoint, $type: null, $size: 1px, $style: solid, $color: $global-color) {
	// Add your Prefix classe name
	@if $type==top {
		.border-#{$brakpoint}-#{$type} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border#{-$type}: #{$size} #{$style} #{$color};
			}
		}
	}

	@else if $type==bottom {
		.border-#{$brakpoint}-#{$type} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border#{-$type}: #{$size} #{$style} #{$color};
			}
		}
	}

	@else if $type==left {
		.border-#{$brakpoint}-#{$type} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border#{-$type}: #{$size} #{$style} #{$color};
			}
		}
	}

	@else if $type==right {
		.border-#{$brakpoint}-#{$type} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border#{-$type}: #{$size} #{$style} #{$color};
			}
		}
	}

	@else {
		.border-#{$brakpoint} {
			@include media-breakpoint-up(#{$brakpoint}) {
				border: #{$size} #{$style} #{$color};
			}
		}
	}
}

// Border Width
@mixin border-width($type: null, $size: 1px) {
	@if $type==top {
		border#{-$type}-width: #{$size};
	}

	@else if $type==right {
		border#{-$type}-width: #{$size};
	}

	@else if $type==bottom {
		border#{-$type}-width: #{$size};
	}

	@else if $type==left {
		border#{-$type}-width: #{$size};
	}

	@else {
		border: #{$size};
	}
}

// Border Color
@mixin border-color($color: $global-color) {
	border-color: #{$color};
}

// Border Style
@mixin border-style($style: solid) {
	border-style: #{$style};
}

// Devide Border 
@mixin devide($name: null, $args: x, $size: 1px, $color: $global-color, $style: solid) {
	@if $args==y {
		@if $name {
			@if $style {
				.#{$name} {

					div+div,
					li+li {
						@include border(top, $size, $style, $color);
					}
				}
			}

			@else {
				.#{$name} {

					div+div,
					li+li {
						@include border(top, $size, $style, $color);
					}
				}
			}
		}

		@else {
			@if $style {

				div+div,
				li+li {
					@include border(top, $size, $style, $color);
				}
			}

			@else {

				div+div,
				li+li {
					@include border(top, $size, $style, $color);
				}
			}
		}
	}

	@else {
		@if $name {
			@if $style {
				.#{$name} {

					div+div,
					li+li {
						@include border(left, $size, $style, $color);
					}
				}
			}

			@else {
				.#{$name} {

					div+div,
					li+li {
						@include border(left, $size, $style, $color);
					}
				}
			}
		}

		@else {
			@if $style {

				div+div,
				li+li {
					@include border(left, $size, $style, $color);
				}
			}

			@else {

				div+div,
				li+li {
					@include border(left, $size, $style, $color);
				}
			}
		}
	}
}

// Devide Padding
@mixin devide-padding($name: null, $args: x, $size: 10,) {
	@if $args==y {
		@if $name== true {
			.#{$name} {
				div+div,
				li+li {
					@include padding(top, $size);
				}
			}
		}

		@else {
			div+div,
			li+li {
				@include padding(top, $size);
			}
		}
	}

	@else {
		@if $name== true {
			.#{$name} {

				div+div,
				li+li {
					@include padding(left, $size);
				}
			}
		}

		@else {

			div+div,
			li+li {
				@include padding(left, $size);
			}
		}
	}
}
// Border Radius Mixin
@mixin radius($type: null, $size) {
	@if $type==top {
		border#{-$type}-left-radius: #{$size};
		border#{-$type}-right-radius: #{$size};
	}

	@else if $type==right {
		border-top-right-radius: #{$size};
		border-bottom-right-radius: #{$size};
	}

	@else if $type==bottom {
		border#{-$type}-left-radius: #{$size};
		border#{-$type}-right-radius: #{$size};
	}

	@else if $type==left {
		border-top-left-radius: #{$size};
		border-bottom-left-radius: #{$size};
	}

	@else {
		border-radius: #{$size};
	}
}

// Border Radius Class Mixin
@mixin radius-class($type: null, $size, $num: null) {
	@if $type==top {
		@if $num {
			.radius-#{$type}-#{$num} {
				border#{-$type}-left-radius: #{$size};
				border#{-$type}-right-radius: #{$size};
			}
		}

		@else {
			.radius-#{$type} {
				border#{-$type}-left-radius: #{$size};
				border#{-$type}-right-radius: #{$size};
			}
		}
	}

	@else if $type==right {
		@if $num {
			.radius-#{$type}-#{$num} {
				border-top-right-radius: #{$size};
				border-bottom-right-radius: #{$size};
			}
		}

		@else {
			.radius-#{$type} {
				border-top-right-radius: #{$size};
				border-bottom-right-radius: #{$size};
			}
		}
	}

	@else if $type==bottom {
		@if $num {
			.radius-#{$type}-#{$num} {
				border#{-$type}-left-radius: #{$size};
				border#{-$type}-right-radius: #{$size};
			}
		}

		@else {
			.radius-#{$type} {
				border#{-$type}-left-radius: #{$size};
				border#{-$type}-right-radius: #{$size};
			}
		}
	}

	@else if $type==left {
		@if $num {
			.radius-#{$type}-#{$num} {
				border-top-left-radius: #{$size};
				border-bottom-left-radius: #{$size};
			}
		}

		@else {
			.radius-#{$type} {
				border-top-left-radius: #{$size};
				border-bottom-left-radius: #{$size};
			}
		}
	}

	@else {
		@if $num {
			.radius-#{$num} {
				border-radius: #{$size};
			}
		}

		@else {
			.radius {
				border-radius: #{$size};
			}
		}
	}
}

//Display mixin
@mixin display($value) {
	.d-#{$value} {
		display: $value;
	}
}

//Responsive Display Mixin
@mixin display-rs($brakpoint, $value) {
	.d-#{$brakpoint}-#{$value} {
		@include media-breakpoint-up(#{$brakpoint}) {
			display: #{$value};
		}
	}
}

//Overlay Mixin
@mixin overlay($class, $width: 100%, $height: $width, $color: null, $direction: null, $gradient: null, $mode: null, $index: 999) {
	.overlay {
		overflow: hidden;
		position: relative;
		@include property;
	}

	@if $gradient {
		.overlay-#{$class} {
			&::before {
				content: '';
				@include absolute();
				@include size($width, $height: $width);
				@include property;
				@include gradient($direction, $gradient);
				@include overlay-mode($mode: $mode);
				z-index: $index;
			}
		}
	}

	@else {
		.overlay-#{$class} {
			&::before {
				content: '';
				@include absolute();
				@include size($width, $height: $width);
				@include property;
				background: $color !important;
				@include overlay-mode($mode: $mode);
				z-index: $index;
			}
		}
	}
}

//Overlay Opacity Mixin
@mixin overlay-opacity($name, $opacity: 1) {
	.overlay-#{$name} {
		&::before {
			opacity: $opacity;
		}
	}
}

//Overlay Mode Mixin
@mixin overlay-mode($name: null, $mode) {
	@if $name {
		.overlay-#{$name} {
			&::before {
				mix-blend-mode: $mode;
			}
		}
	}

	@else {
		mix-blend-mode: $mode;
	}

}

// Size 
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

//Position mixin
@mixin position($position, $args) {
	@each $o in top right bottom left {
		$i: index($args, $o);

		@if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
			#{$o}: nth($args, $i + 1);
		}
	}

	position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
	@include position(absolute, $args);
}

@mixin fixed($args: '') {
	@include position(fixed, $args);
}

@mixin relative($args: '') {
	@include position(relative, $args);
}

// Posion Top/Right/Bottom/Left Alignment
@mixin trbl($type, $value, $pre: null) {

	@if $type==top {
		.#{$type}-#{$value} {
			top: #{$value}#{$pre};
		}
	}

	@else if $type==right {
		.#{$type}-#{$value} {
			right: #{$value}#{$pre};
		}
	}

	@else if $type==bottom {
		.#{$type}-#{$value} {
			bottom: #{$value}#{$pre};
		}
	}

	@else if $type==left {
		.#{$type}-#{$value} {
			left: #{$value}#{$pre};
		}
	}
}

// Posion Top/Bottom/Left/Right Alignment
@mixin position-align($name, $position) {

	@if $name==center {
		@if $position==relative {
			.inset-#{$name}-relative {
				@include relative(top 50% left 50%);
				transform: translate(-50%, -50%);
			}
		}

		@else {
			.inset-#{$name} {
				@include absolute(top 50% left 50%);
				transform: translate(-50%, -50%);
			}
		}
	}

	@else if $name==tl-center {
		@if $position==relative {
			.#{$name}-relative {
				@include relative(top 50% left 0);
				transform: translateY(-50%);
			}
		}

		@else {
			.#{$name} {
				@include absolute(top 50% left 0);
				transform: translateY(-50%);
			}
		}
	}

	@else if $name==tr-center {
		@if $position==relative {
			.#{$name}-relative {
				@include relative(top 50% right 0);
				transform: translateY(-50%);
			}
		}

		@else {
			.#{$name} {
				@include absolute(top 50% right 0);
				transform: translateY(-50%);
			}
		}
	}

	@else if $name==top-right {
		@if $position==relative {
			.#{$name}-relative {
				@include relative(top 0 right 0);
			}
		}

		@else {
			.#{$name} {
				@include absolute(top 0 right 0);
			}
		}
	}

	@else if $name==bl-center {
		@if $position==relative {
			.#{$name}-relative {
				@include relative(bottom 0 left 50%);
				transform: translateY(-50%);
			}
		}

		@else {
			.#{$name} {
				@include absolute(bottom 0 left 50%);
				transform: translateX(-50%);
			}
		}
	}

	@else if $name==bottom-left {
		@if $position==relative {
			.#{$name}-relative {
				@include relative(bottom 0 left 0);
			}
		}

		@else {
			.#{$name} {
				@include absolute(bottom 0 left 0);
			}
		}
	}

	@else if $name==bottom-right {
		@if $position==relative {
			.#{$name}-relative {
				@include relative(bottom 0 right 0);
			}
		}

		@else {
			.#{$name} {
				@include absolute(bottom 0 right 0);
			}
		}
	}
}

// Box Shadow Mixin
@mixin shadow($x: 0, $y: 0, $b: 0, $color, $opacity: 1) {
	-webkit-box-shadow: $x $y $b 0px rgba($color: $color, $alpha: $opacity);
	-moz-box-shadow: $x $y $b 0px rgba($color: $color, $alpha: $opacity);
	box-shadow: $x $y $b 0px rgba($color: $color, $alpha: $opacity);
}

//Text mixin
@mixin text-align($value: left, $brackpoint: null, $name: null) {
	@if $name {
		@if $brackpoint {
			.#{$name} {
				@include media-breakpoint-up(#{$brackpoint}) {
					text-align: $value;
				}
			}
		}

		@else {
			.#{$name} {
				text-align: $value;
			}
		}
	}

	@else {
		@if $brackpoint {
			.text-#{$brackpoint}-#{$value} {
				@include media-breakpoint-up(#{$brackpoint}) {
					text-align: $value;
				}
			}
		}

		@else {
			.text-#{$value} {
				text-align: $value;
			}
		}
	}
}

// prefix declarations
@mixin prefixed($property, $value) {
	@if $webkit==true {
		-webkit-#{$property}: #{$value};
	}

	@if $moz==true {
		-moz-#{$property}: #{$value};
	}

	@if $ms==true {
		-ms-#{$property}: #{$value};
	}

	@if $o==true {
		-o-#{$property}: #{$value};
	}

	#{$property}: #{$value};
}

// prefix keyframes
@mixin keyframes($name) {
	@if $webkit==true {
		@-webkit-keyframes #{$name} {
			@content;
		}
	}

	@if $moz==true {
		@-moz-keyframes #{$name} {
			@content;
		}
	}

	@if $ms==true {
		@-ms-keyframes #{$name} {
			@content;
		}
	}

	@if $o==true {
		@-o-keyframes #{$name} {
			@content;
		}
	}

	@keyframes #{$name} {
		@content;
	}
}

@mixin property() {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	@include prefixed(transition, 0.3s ease-out);
}

@mixin transform() {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	@include prefixed(transform, translate(0, -50%));
}


/*--------------------------------------
	- Component
----------------------------------------*/
// Nav Menu Mixin
@mixin nav($li: inline-block, $position: relative, $ff: $font, $fs: 20px, $fw: 400, $color: $global-color, $bg: transparent, $tt: capitalize, $py: 10px, $px: 10px, $pt: null, $pr: null, $pb: null, $pl: null, $my: null, $mx: null, $mt: null, $mr: null, $mb: null, $ml: null, $display: block, $index: 99, $h-color: $color, $h-bg: $bg, $h-py: $py, $h-px: $px, $h-pt: $pt, $h-pr: $pr, $h-pb: $pb, $h-pl: $pl, $h-my: $my, $h-mx: $mx, $h-mt: $mt, $h-mr: $mr, $h-mb: $mb, $h-ml: $ml, $h-td: none) {

	ul {
		margin: 0;
	}

	li {
		display: $li;

		a {
			position: $position;
			font-family: $ff;
			font-size: $fs;
			font-weight: $fw;
			color: $color;
			background: $bg;
			text-transform: $tt;
			padding: $py $px;
			padding-top: $pt;
			padding-right: $pr;
			padding-bottom: $pb;
			padding-left: $pl;
			margin: $my $mx;
			margin-top: $mt;
			margin-right: $mr;
			margin-bottom: $mb;
			margin-left: $ml;
			display: $display;
			z-index: $index;

			&:hover {
				color: $h-color;
				background: $h-bg;
				padding: $h-py $h-px;
				padding-top: $h-pt;
				padding-right: $h-pr;
				padding-bottom: $h-pb;
				padding-left: $h-pl;
				margin: $h-my $h-mx;
				margin-top: $h-mt;
				margin-right: $h-mr;
				margin-bottom: $h-mb;
				margin-left: $h-ml;
				text-decoration: $h-td;
			}
		}
	}
}

// Nav Tabs Mixin
@mixin nav-tabs($name, $ff: $font, $fw: 400, $fs: 16px, $lh: null, $color: $global-color, $bg: null, $tt: capitalize, $p-name: null, $p-value:null, $m-name: null, $m-value:null, $h-color: null, $h-bg: null, $brackpoint: null, $b-fs: null, $b-p-name: null, $b-p-value:null, $b-m-name: null, $b-m-value:null) {
	.#{$name} {
		display: block;
		font-family: $ff;
		font-weight: $fw;
		font-size: $fs;
		line-height: $lh;
		color: $color;
		text-transform: $tt;
		@include padding($p-name, $p-value);
		@include margin($m-name, $m-value);

		@if $brackpoint {
			@include media-breakpoint-up($brackpoint) {
				font-size: $b-fs;
				@include padding($b-p-name, $b-p-value);
				@include margin($b-m-name, $b-m-value);
			}
		}

		&:hover {
			color: $h-color;
			background: $h-bg;
		}

		// Disabled state lightens text
		&.disabled {
			color: $nav-link-disabled-color;
			pointer-events: none;
			cursor: default;
		}
	}
}

// Button mixin
@mixin btn ($position: relative, $ff, $fs: $global-font-size, $fw: normal, $lh: 1, $tt: capitalize, $py: 10px, $px: 10px, $border: null, $radius: null, $display: inline-block, ) {
	position: $position;
	font-size: $fs;
	font-family: $ff;
	font-weight: $fw;
	line-height: $lh;
	text-transform: $tt;
	border: $border;
	border-radius: $radius;
	padding: $py $px;
	display: $display;
	overflow: hidden;
	text-align: center;
}

// Button Color
@mixin btn-color($bg, $color) {
	background: $bg;
	color: $color;
}

// Form Input mixin 
@mixin form-input($fs: null, $fw: null, $lh: null, $color: $global-color, $bg: transparent, $bg-opacity: 1, $opacity: 1, $tt: capitalize, $py: 15px, $px: 20px, $my: 10px, $mx: 0, $width: 100%, $height: $width, $border-type: null, $border-size: 1px, $border-style: solid, $border-color: $global-color, $radius-type: null, $radius-size: 0, $shadow: null, $focus: false, $f-fw: null, $f-color: $color, $f-bg: null, $f-opacity: 1, $f-border-type: null, $f-border-size: $border-size, $f-border-style: $border-style, $f-border-color: $red, $f-radius-type: null, $f-radius-size: null, $f-shadow: null) {

	font-size: $fs;
	font-weight: $fw;
	line-height: $lh;
	color: rgba($color, $opacity);
	background: rgba($bg, $bg-opacity);
	text-transform: $tt;
	padding: $py $px;
	margin: $my $mx;
	@include size($width, $height);
	@include border($border-type, $border-size, $border-style, $border-color);
	@include radius($radius-type, $radius-size);
	box-shadow: $shadow;
	@include property;

	@if $focus==true {
		&:focus {
			font-weight: $f-fw;
			color: rgba($f-color, $f-opacity);
			background: $f-bg;
			@include border($f-border-type, $f-border-size, $f-border-style, $f-border-color);
			@include radius($f-radius-type, $f-radius-size);
			box-shadow: $f-shadow;
		}
	}

}

// Form Textarea mixin 
@mixin textarea($fs: null, $fw: null, $lh: null, $color: $global-color, $opacity: 1, $tt: capitalize, $py: 15px, $px: 20px, $width: 100%, $height: $width, $border-type: null, $border-size: 1px, $border-style: solid, $border-color: transparent, $radius-type: null, $radius-size: 0, $shadow: null, $f-fw: null, $f-color: $color, $f-opacity: 1, $f-border-type: null, $f-border-size: $border-size, $f-border-style: $border-style, $f-border-color: $border-color, $f-radius-type: null, $f-radius-size: null, $f-shadow: null) {

	textarea {
		font-size: $fs;
		font-weight: $fw;
		line-height: $lh;
		padding: $py $px;
		color: rgba($color, $opacity);
		text-transform: $tt;
		@include size($width, $height);
		@include border($border-type, $border-size, $border-style, $border-color);
		@include radius($radius-type, $radius-size);
		box-shadow: $shadow;
		@include property;

		&:focus {
			font-weight: $f-fw;
			color: rgba($f-color, $f-opacity);
			@include border($f-border-type, $f-border-size, $f-border-style, $f-border-color);
			@include radius($f-radius-type, $f-radius-size);
			box-shadow: $f-shadow;
		}
	}
}

// Dropdown Menu Mixin
@mixin dropdown-menu($width: 240px, $padding: 15px, $apadding: 10px, $margin: 5px, $align: left, $top: 100%, $index: 99, $radius: null, $shadow: null, $hover-bg: $black, $hover-color: $white) {
	position: absolute;
	width: $width;
	padding: $padding;
	text-align: $align;
	top: $top;
	z-index: $index;
	border-radius: $radius;
	box-shadow: $shadow;
	opacity: 0;
	visibility: hidden;

	li{
		display: block;
		a{
			border-radius: $radius;
			padding: $apadding;
			margin-bottom: $margin;
			display: block;
			&:hover{
				background: $hover-bg;
				color: $hover-color;
			}
		}
	}
}

//Breadcrumb 
@mixin breadcrumb($name, $child-name, $display: flex, $fs: 24px, $fw: 400, $color: $global-color, $bg: transparent, $p-name, $p-value: 10px 15, $p-pre: px, $m-name: bottom, $m-value: 15, $m-pre, $a-color: $gray, $before: false, $b-content: "।।", $b-absolute: null, $b-color: $white, $bp-name: right, $bp-value: 8, $bp-pre: px, $b-display) {
	.#{$name} {
		list-style: none;
		font-size: $fs;
		font-weight: $fw;
		color: $color;
		background: $bg;
		@if $display== flex {
			display: -ms-flexbox;
			display: flex;
			-ms-flex-wrap: wrap;
			flex-wrap: wrap;
		}
		@else {
			@content;
		}
		@include padding($p-name, $p-value, $p-pre);
		@include margin($m-name, $m-value, $m-pre);
	}

	.#{$child-name}+.#{$child-name} {
		&.active {
			color: $a-color;
		}

		@if $before == true {
			&::before {
				content: $b-content;
				@if $b-absolute {
					@include absolute($b-absolute);
				}
				@include padding($bp-name, $bp-value, $bp-pre);
				display: $b-display;
				color: $b-color;
			}
		}
	}
}

//Pagination Mixin
@mixin pagination () {
	.#{$name}{
		li{
			a{
				
			}
		}
	}
}

// Social Link 
@mixin social($name, $display: inline-block, $m-name: mr, $m-value: 10, $before: false, $devide-li: false, $before-content: '', $position: null, $before-width: 1px, $before-height: 20px, $before-bg: $gray, $fs: 20px, $bg: transparent, $color: $global-color, $width: null, $height: $width, $lh: $width, $b-type: null, $b-size: null, $b-style: null, $b-color: null, $radius: null, $p-name: null, $p-value: null, $shadow-x: null, $shadow-y: null, $shadow-b: null, $shadow-color: $color, $shadow-opacity: 1, $h-bg: null, $h-color: $color, $hb-type: null, $hb-size: null, $hb-style: null, $hb-color: transparent, $hs-x: null, $hs-y: null, $hs-b: null, $hs-color: $color, $hs-opacity: 1) {
	.#{$name} {
		ul {
			margin: 0;
			padding: 0;
		}

		li {
			position: relative;
			@include margin($m-name, $m-value);

			@if $display==inline-flex {
				display: inline-flex;
				flex-wrap: wrap;
			}

			@else {
				display: $display;
			}

			@if $before==true {
				@if $devide-li==true {
					&+li {
						&::before {
							content: $before-content;
							@include absolute($position);
							@include size($before-width, $before-height);
							background: $before-bg;
						}
					}
				}

				@else {
					&::before {
						content: $before-content;
						@include absolute($position);
						@include size($before-width, $before-height);
						background: $before-bg;
					}
				}
			}

			a {
				font-size: $fs;
				line-height: $lh;
				background: $bg;
				color: $color;
				display: block;
				text-align: center;
				@include size($width, $height);
				@include border($b-type, $b-size, $b-style, $b-color);
				@include radius($size: $radius);
				@include padding($p-name, $p-value);

				@if $shadow-color==true {
					@include shadow($shadow-x, $shadow-y, $shadow-b, $shadow-color, $shadow-opacity);
				}

				@include property;

				&:hover {
					background: $h-bg;
					color: $h-color;

					@if $hb-size==true {
						@include border($hb-type, $hb-size, $hb-style, $hb-color);
					}

					@if $hs-color==true {
						@include shadow($hs-x, $hs-y, $hs-b, $hs-color, $hs-opacity);
					}
				}
			}
		}
	}
}

//Owl Carusel Nav
@mixin owl-nav($name: null, $fs: 20px, $bg: transparent, $color: $global-color, $position: null, $width: 50px, $height: $width, $lh: null, $radius: 0, $border: 2px solid $global-color, $transform: null, $p: 0, $owl-prev-left: 0, $owl-prev-right: null, $owl-next-left: null, $owl-next-right: 0, $h-bg: null, $h-color: null, $h-border: null) {
	@if $name {
		.#{$name} {
			button {
				@include absolute($position);
				@include size($width, $height);
				font: inherit;
				font-size: $fs;
				background: $bg;
				color: $color;
				line-height: $lh !important;
				border-radius: $radius !important;
				border: $border !important;
				transform: $transform;
				padding: $p !important;
				cursor: pointer;
				@include property;

				&.owl-prev {
					left: $owl-prev-left;
					right: $owl-prev-right;
				}

				&.owl-next {
					left: $owl-next-left;
					right: $owl-next-right;
				}

				&:focus {
					outline: none;
				}

				&:hover {
					background: $h-bg !important;
					color: $h-color !important;
					border: $h-border !important;
				}
			}
		}
	}

	@else {
		.owl-nav {
			button {
				@include absolute($position);
				@include size($width, $height);
				font: inherit;
				font-size: $fs;
				background: $bg;
				color: $color;
				line-height: $lh !important;
				border-radius: $radius !important;
				border: $border !important;
				transform: $transform;
				padding: $p !important;
				cursor: pointer;
				@include property;

				&.owl-prev {
					left: $owl-prev-left;
					right: $owl-prev-right;
				}

				&.owl-next {
					left: $owl-next-left;
					right: $owl-next-right;
				}

				&:focus {
					outline: none;
				}

				&:hover {
					background: $h-bg !important;
					color: $h-color !important;
					border: $h-border !important;
				}
			}
		}
	}
}

// OWl Carusel Dots 
@mixin owl-dots($dots-position: left 50% bottom 0, $translateX: -50%, $translateY: -50%, $width: 8px, $height: $width, $display: inline-block, $bg: $global-color, $radius-type: null, $radius-size: 50%, $p-name: null, $p-value: 5, $m-name: ml, $m-value: 15, $before: false, $b-content: '', $b-bg: transparent, $b-position: left -9px top -9px, $b-width: 25px, $b-height: $b-width, $b-radius-type: null, $b-radius-size: 50%, $b-border: 1px solid $global-color, $active: true, $a-width: $width, $a-height: $height, $a-bg: $bg, $active-before: false, $ab-content: '', $ab-position: left -9px top -9px, $ab-width: 25px, $ab-height: $ab-width, $ab-border: 2px solid $global-color, $ab-radius-type: null, $ab-radius-size: 50%) {

	@include absolute($dots-position);

	@if $translateY==true {
		transform: translateY($translateY);
	}

	@else {
		transform: translateX($translateX);
	}

	button {
		position: relative;
		@include size($width, $height);
		display: $display;
		background: $bg !important;
		@include radius($radius-type, $radius-size);
		@include padding($p-name, $p-value);
		@include margin($m-name, $m-value);

		@if $before==true {
			&::before {
				content: $b-content;
				background: $b-bg;
				@include absolute($b-position);
				@include size($b-width, $b-height);
				@include radius($b-radius-type, $b-radius-size);
				border: $b-border;
			}
		}

		@if $active==true {
			&.active {
				@include size($a-width, $a-height);
				background: $a-bg !important;

				@if $active-before==true {
					&::before {
						content: $ab-content;
						@include absolute($ab-position);
						@include size($ab-width, $ab-height);
						@include radius($ab-radius-type, $ab-radius-size);
						border: $ab-border;
					}
				}
			}
		}

		&:focus {
			outline: none;
		}
	}
}

// Footer Menu 
@mixin footer-menu($size: 18px, $padding: 10px, $opacity: 1, $display: block, $text: capitalize) {
	ul {
		li {
			a {
				font-size: $size;
				opacity: $opacity;
				padding-bottom: $padding;
				display: $display;
				text-transform: $text;
			}
		}
	}
}

// Footer Widget 
@mixin footer-widget($value, $weight: 600, $prefix, $padding) {
	h3{
		font-size: $value;
		padding-#{$prefix}: $padding;
		font-weight: $weight;
	}
	@include footer-menu;
}


//Extra Small Screen Only
@mixin xs {
	@media screen and (max-width: 575px) {
		@content;
	}
}

//Small Screen
@mixin sm {
	@media screen and (min-width: 576px) {
		@content;
	}
}

//Medium Screen
@mixin md {
	@media screen and (min-width: 768px) {
		@content;
	}
}

//Large Screen
@mixin lg {
	@media screen and (min-width: 992px) {
		@content;
	}
}

//Extra Large Screen
@mixin xl {
	@media screen and (min-width: 1200px) {
		@content;
	}
}

//Desktop Screen
@mixin desktop {
	@media screen and (min-width: 1367px) {
		@content;
	}
}